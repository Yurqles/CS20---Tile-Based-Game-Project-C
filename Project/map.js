function createMap() {
    return [
        [0, 0, 4, 3, 4, 14, 12, 12, 12, 12, 16, 4, 4, 4, 0, 0, 0],
        [0, 0, 4, 3, 4, 4, 11, 12, 12, 13, 3, 4, 4, 4, 4, 0, 0],
        [0, 4, 4, 4, 3, 4, 14, 12, 12, 16, 4, 4, 3, 4, 4, 0, 0],
        [0, 53, 54, 4, 4, 25, 27, 11, 13, 25, 27, 3, 3, 3, 53, 54, 0],
        [0, 55, 56, 4, 25, 29, 30, 11, 13, 28, 29, 27, 4, 4, 55, 56, 0],
        [0, 4, 3, 25, 29, 29, 30, 11, 13, 28, 29, 29, 27, 3, 4, 3, 4],
        [3, 4, 25, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 27, 4, 4, 4],
        [10, 25, 29, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 29, 27, 8, 9],
        [12, 17, 17, 17, 17, 17, 17, 12, 12, 17, 17, 17, 17, 17, 17, 12, 12],
        [16, 31, 29, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 29, 33, 14, 15],
        [4, 4, 31, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 33, 4, 4, 4],
        [4, 4, 4, 31, 29, 29, 30, 11, 13, 28, 29, 29, 33, 4, 4, 4, 4],
        [4, 53, 54, 4, 31, 29, 30, 11, 13, 28, 29, 33, 4, 4, 53, 54, 4],
        [4, 55, 56, 4, 4, 31, 30, 11, 13, 28, 33, 4, 4, 4, 55, 56, 4],
        [4, 4, 4, 4, 4, 4, 8, 12, 12, 10, 4, 3, 4, 4, 4, 4, 4],
        [0, 0, 0, 4, 4, 4, 11, 12, 12, 13, 4, 4, 4, 0, 0, 0, 0],
        [0, 0, 0, 0, 4, 8, 12, 12, 12, 12, 13, 4, 0, 0, 0, 0, 0],
    ]
}

function nextLevel() { 
    if (stage == 1) {
        map = [
            [0, 0, 4, 3, 4, 14, 12, 12, 12, 12, 16, 4, 4, 4, 0, 0, 0],
            [0, 0, 4, 3, 4, 4, 11, 12, 12, 13, 3, 4, 4, 4, 4, 0, 0],
            [0, 4, 4, 4, 3, 4, 14, 12, 12, 16, 4, 4, 3, 4, 4, 0, 0],
            [0, 53, 54, 4, 4, 25, 27, 11, 13, 25, 27, 3, 3, 3, 53, 54, 0],
            [0, 55, 56, 4, 25, 29, 30, 11, 13, 28, 29, 27, 4, 4, 55, 56, 0],
            [0, 4, 3, 25, 29, 29, 30, 11, 13, 28, 29, 29, 27, 3, 4, 3, 4],
            [3, 4, 25, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 27, 4, 4, 4],
            [10, 25, 29, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 29, 27, 8, 9],
            [12, 17, 17, 17, 17, 17, 17, 12, 12, 17, 17, 17, 17, 17, 17, 12, 12],
            [16, 31, 29, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 29, 33, 14, 15],
            [4, 4, 31, 29, 29, 29, 30, 11, 13, 28, 29, 29, 29, 33, 4, 4, 4],
            [4, 4, 4, 31, 29, 29, 30, 11, 13, 28, 29, 29, 33, 4, 4, 4, 4],
            [4, 53, 54, 4, 31, 29, 30, 11, 13, 28, 29, 33, 4, 4, 53, 54, 4],
            [4, 55, 56, 4, 4, 31, 30, 11, 13, 28, 33, 4, 4, 4, 55, 56, 4],
            [4, 4, 4, 4, 4, 4, 8, 12, 12, 10, 4, 3, 4, 4, 4, 4, 4],
            [0, 0, 0, 4, 4, 4, 11, 12, 12, 13, 4, 4, 4, 0, 0, 0, 0],
            [0, 0, 0, 0, 4, 8, 12, 12, 12, 12, 13, 4, 0, 0, 0, 0, 0],
        ]
    }
    else if (stage == 2) {
        map = [
            [2, 2, 3, 4, 0, 0, 0, 20, 53, 54, 0, 2, 28, 29, 29, 29, 29],
            [2, 2, 4, 3, 0, 0, 0, 20, 55, 56, 0, 3, 28, 29, 29, 29, 29],
            [0, 3, 3, 2, 0, 0, 0, 20, 0, 0, 2, 4, 28, 29, 29, 29, 29],
            [0, 0, 4, 8, 9, 9, 9, 12, 10, 0, 0, 2, 3, 31, 32, 32, 32],
            [0, 0, 0, 11, 12, 12, 12, 12, 13, 0, 0, 3, 4, 3, 2, 3, 4],
            [4, 0, 0, 14, 12, 12, 49, 50, 13, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 14, 15, 51, 52, 13, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 11, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 14, 15, 15, 17, 17, 17, 17, 18, 53, 54, 0],
            [3, 4, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 20, 55, 56, 0],
            [7, 6, 6, 7, 7, 3, 2, 0, 0, 53, 54, 0, 0, 20, 0, 0, 0],
            [26, 26, 26, 26, 27, 7, 4, 0, 0, 55, 56, 0, 0, 20, 0, 0, 0],
            [29, 29, 29, 29, 29, 27, 7, 4, 0, 0, 0, 0, 0, 20, 0, 53, 54],
            [29, 29, 29, 29, 29, 29, 27, 6, 0, 0, 0, 0, 0, 20, 0, 55, 56],
            [29, 29, 29, 29, 29, 29, 30, 7, 0, 0, 53, 54, 0, 20, 0, 0, 0], 
            [29, 29, 29, 29, 29, 29, 30, 6, 0, 0, 55, 56, 0, 20, 0, 0, 0], 
            [29, 29, 29, 29, 29, 29, 30, 7, 0, 0, 0, 0, 0, 21, 17, 17, 61], 
        ]
    }
    else if (stage == 3) {
        map = [
            [34, 35, 36, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 34, 35, 36],
            [37, 38, 39, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 37, 38, 39],
            [40, 41, 42, 29, 29, 29, 32, 32, 32, 32, 32, 29, 29, 29, 40, 41, 42],
            [43, 44, 45, 29, 29, 33, 0, 0, 0, 0, 0, 31, 29, 29, 43, 44, 45],
            [46, 47, 48, 32, 33, 0, 0, 8, 9, 10, 0, 0, 31, 32, 46, 47, 48],
            [0, 0, 0, 0, 0, 0, 8, 12, 12, 12, 10, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 8, 12, 12, 12, 12, 12, 10, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 8, 12, 49, 50, 61, 49, 50, 12, 10, 0, 0, 0, 0],
            [17, 17, 17, 17, 12, 12, 51, 52, 12, 51, 52, 12, 12, 17, 17, 17, 17],
            [0, 0, 0, 0, 14, 12, 12, 12, 12, 12, 12, 12, 16, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 14, 12, 12, 12, 12, 12, 16, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 14, 12, 12, 12, 16, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 14, 15, 16, 0, 0, 0, 0, 0, 0, 0],
            [34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36],
            [40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42],
            [43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45],
            [46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47],
        ]
    } else if (stage == 4) {
        map = [
            [25, 26, 27, 20, 25, 26, 26, 27, 20, 25, 26, 26, 26, 26, 26, 26, 27],
            [28, 29, 30, 20, 28, 29, 29, 30, 20, 28, 29, 29, 29, 29, 29, 29, 30],
            [28, 29, 30, 20, 28, 29, 29, 30, 12, 17, 17, 17, 17, 17, 17, 17, 17],
            [31, 32, 33, 20, 31, 32, 32, 33, 20, 31, 32, 32, 32, 32, 32, 29, 30],
            [17, 17, 17, 12, 17, 17, 17, 17, 12, 17, 17, 17, 17, 17, 18, 28, 30],
            [25, 26, 27, 20, 25, 26, 26, 27, 20, 25, 26, 26, 26, 27, 20, 28, 30],
            [28, 29, 30, 20, 28, 29, 29, 30, 20, 28, 29, 29, 29, 30, 20, 28, 30],
            [28, 29, 30, 20, 28, 29, 29, 30, 20, 31, 32, 32, 32, 33, 20, 31, 33],
            [28, 29, 30, 20, 28, 29, 29, 30, 14, 17, 17, 17, 17, 17, 12, 17, 17],
            [28, 29, 30, 20, 28, 29, 29, 29, 26, 26, 26, 26, 26, 27, 20, 25, 27],
            [28, 29, 30, 20, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 20, 28, 30],
            [17, 17, 17, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 28, 30],
            [25, 26, 27, 20, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 20, 28, 30],
            [28, 29, 30, 20, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 20, 28, 30],
            [28, 29, 30, 20, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 20, 28, 30],
            [28, 29, 30, 20, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 20, 28, 30],
            [31, 32, 33, 61, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 20, 31, 33],
        ]
    } else if (stage == 5) {
        map = [
            [28, 29, 29, 29, 29, 29, 33, 8, 9, 10, 31, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 33, 8, 12, 12, 12, 10, 31, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 33, 8, 12, 12, 12, 12, 12, 10, 31, 29, 29, 29, 30],
            [28, 29, 29, 33, 8, 12, 12, 12, 12, 12, 12, 12, 10, 31, 29, 29, 30],
            [28, 29, 30, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 28, 29, 30],
            [28, 29, 30, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 28, 29, 30],
            [28, 29, 30, 14, 12, 12, 12, 12, 62, 12, 12, 12, 12, 16, 28, 29, 30],
            [28, 29, 29, 27, 14, 12, 12, 12, 12, 12, 12, 12, 16, 25, 29, 29, 30],
            [28, 29, 29, 29, 27, 14, 12, 12, 12, 12, 12, 16, 25, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 27, 14, 12, 12, 12, 16, 25, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 29, 27, 11, 12, 13, 25, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 29, 30, 11, 12, 13, 28, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 29, 30, 11, 12, 13, 28, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 29, 30, 11, 12, 13, 28, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 29, 33, 11, 12, 13, 31, 29, 29, 29, 29, 29, 30],
            [28, 29, 29, 29, 29, 33, 8, 12, 12, 12, 10, 31, 29, 29, 29, 29, 30],
            [31, 32, 32, 32, 33, 8, 12, 12, 12, 12, 12, 10, 31, 32, 32, 32, 33],
        ]
    } else if (stage == 6) {
        map = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 0],
            [0, 0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0],
            [0, 0, 12, 0, 0, 0, 12, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0],
            [0, 0, 12, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0],
            [0, 0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0],
            [0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        ]
    }
}

//rows x columns
//17 x 17
function drawArray() {
    //Draw stuff in the array from the tilesheet
    for (let i = 0; i < map.length; i++) {
        for(let j = 0; j < map[i].length; j++) {
           if (map[i][j] == 0) { // blank grass
                ctx.drawImage(tilemap, 0, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 2) { //one grass
                ctx.drawImage(tilemap, 16 * 1, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 3) {//two grass
                ctx.drawImage(tilemap, 16 * 2, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 4) {//one grass
                ctx.drawImage(tilemap, 16 * 3, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 5) { //two grass
                ctx.drawImage(tilemap, 16 * 4, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 6) { //lots of grass
                ctx.drawImage(tilemap, 16 * 5, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 7) { //lots of grass
                ctx.drawImage(tilemap, 16 * 6, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 8) { //path top left
                ctx.drawImage(tilemap, 16 * 7, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 9) { // path top middle
                ctx.drawImage(tilemap, 16 * 8, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 10) {//path top right
                ctx.drawImage(tilemap, 16 * 9, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 11) {//path middle right
                ctx.drawImage(tilemap, 16 * 7, 16, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 12) {//path middle
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 13) {//path middle right
                ctx.drawImage(tilemap, 16 * 9, 16, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 14) {//path bottom left
                ctx.drawImage(tilemap, 16 * 7, 16 * 2, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 15) {//path bottom middle
                ctx.drawImage(tilemap, 16 * 8, 16 * 2, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 16) {//path bottom right
                ctx.drawImage(tilemap, 16 * 9, 16 * 2, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 17) {//path connecting path left to right 
                ctx.drawImage(tilemap, 16 * 10, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 18) {//path connecting path top right
                ctx.drawImage(tilemap, 16 * 11, 0, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 19) {//path connecting path top left
                ctx.drawImage(tilemap, 16 * 10, 16, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 20) {//path connecting path top to bottom  
                ctx.drawImage(tilemap, 16 * 11, 16, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 21) {//path connecting bottom left
                ctx.drawImage(tilemap, 16 * 10, 16 * 2, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 22) {//path connecting bottom right
                ctx.drawImage(tilemap, 16 * 11, 16 * 2, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 23) {//path connecter
                ctx.drawImage(tilemap, 16 * 9, 16 * 3, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 24) {//path connecter
                ctx.drawImage(tilemap, 16 * 10, 16 * 3, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 25) { //lake top left
                ctx.drawImage(tilemap, 0, 16 * 8, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 26) { //lake middle
                ctx.drawImage(tilemap, 16, 16 * 8, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 27) { //lake top right
                ctx.drawImage(tilemap, 16 * 2, 16 * 8, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 28) { //lake left
                ctx.drawImage(tilemap, 0, 16 * 9, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 29) { //lake center piece
                ctx.drawImage(tilemap, 16, 16 * 9, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 30) { //lake right
                ctx.drawImage(tilemap, 16 * 2, 16 * 9, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 31) { //lake center piece
                ctx.drawImage(tilemap, 0, 16 * 10, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 32) { //lake bottom left
                ctx.drawImage(tilemap, 16, 16 * 10, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 33) { //lake bottom left
                ctx.drawImage(tilemap, 16 * 2, 16 * 10, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 34) { //cliff top left
                ctx.drawImage(tilemap, 16 * 9, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 35) { //cliff top middle
                ctx.drawImage(tilemap, 16 * 10, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 36) { //cliff top right
                ctx.drawImage(tilemap, 16 * 11, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 37) { //cliff top left
                ctx.drawImage(tilemap, 16 * 9, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 38) { //cliff top middle
                ctx.drawImage(tilemap, 16 * 10, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 39) { //cliff top right
                ctx.drawImage(tilemap, 16 * 11, 16 * 12, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 40) { //cliff middle left
                ctx.drawImage(tilemap, 16 * 9, 16 * 13, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 41) { //cliff middle middle
                ctx.drawImage(tilemap, 16 * 10, 16 * 13, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 42) { //cliff middle right
                ctx.drawImage(tilemap, 16 * 11, 16 * 13, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 43) { //cliff 2nd from bottom left
                ctx.drawImage(tilemap, 16 * 9, 16 * 14, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 44) { //cliff 2nd from bottom middle
                ctx.drawImage(tilemap, 16 * 10, 16 * 14, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 45) { //cliff 2nd from bottom right
                ctx.drawImage(tilemap, 16 * 11, 16 * 14, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 46) { //cliff bottom left
                ctx.drawImage(tilemap, 16 * 9, 16 * 15, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 47) { //cliff bottom middle
                ctx.drawImage(tilemap, 16 * 10, 16 * 15, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 48) { //cliff bottom right
                ctx.drawImage(tilemap, 16 * 11, 16 * 15, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 49) {//cherry tree top left
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 8, 16 * 6, 15, 15, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 50) {//cherry tree top right
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 9, 16 * 6, 15, 15, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 51) {//cherry tree bottom left
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 8, 16 * 7, 15, 15, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 52) {//cherry tree bottom right
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 9, 16 * 7, 15, 15, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 53) {//normal tree top left
                ctx.drawImage(tilemap, 0, 0, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 2, 16 * 6, 14, 14, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 54) {//normal tree top right
                ctx.drawImage(tilemap, 0, 0, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 3, 16 * 6, 14, 14, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 55) {//normal tree top right
                ctx.drawImage(tilemap, 0, 0, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 2, 16 * 7, 14, 14, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 56) {//normal tree top right
                ctx.drawImage(tilemap, 0, 0, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(tilemap, 16 * 3, 16 * 7, 14, 14, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 57) {//end lake top left
                ctx.drawImage(tilemap, 0, 16 * 14, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 58) {//end lake top right
                ctx.drawImage(tilemap, 16 * 2, 16 * 14, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 59) {//end lake bottom left
                ctx.drawImage(tilemap, 0, 16 * 15, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 60) {//end lake bottom right
                ctx.drawImage(tilemap, 16 * 2, 16 * 15, 16, 16, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 61) {//key
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(key, 0, 0, 36, 64, j * 32, i * 32, 32, 32);
            } else if (map[i][j] == 62) {//chest
                ctx.drawImage(tilemap, 16 * 8, 16, 16, 16, j * 32, i * 32, 32, 32);
                ctx.drawImage(chest, 0, 0, 1025, 705, j * 32, i * 32, 32, 32);
            }
        }
    }
}
